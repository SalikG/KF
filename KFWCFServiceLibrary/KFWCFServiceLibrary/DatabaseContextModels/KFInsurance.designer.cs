#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KFWCFServiceLibrary.DatabaseContextModels
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="KF")]
	public partial class KFInsuranceDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertZipcode(Zipcode instance);
    partial void UpdateZipcode(Zipcode instance);
    partial void DeleteZipcode(Zipcode instance);
    partial void InsertBrand(Brand instance);
    partial void UpdateBrand(Brand instance);
    partial void DeleteBrand(Brand instance);
    partial void InsertCar(Car instance);
    partial void UpdateCar(Car instance);
    partial void DeleteCar(Car instance);
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertInsurance(Insurance instance);
    partial void UpdateInsurance(Insurance instance);
    partial void DeleteInsurance(Insurance instance);
    partial void InsertModel(Model instance);
    partial void UpdateModel(Model instance);
    partial void DeleteModel(Model instance);
    partial void InsertOffer(Offer instance);
    partial void UpdateOffer(Offer instance);
    partial void DeleteOffer(Offer instance);
    partial void InsertType(Type instance);
    partial void UpdateType(Type instance);
    partial void DeleteType(Type instance);
    #endregion
		
		public KFInsuranceDataContext() : 
				base(global::KFWCFServiceLibrary.Properties.Settings.Default.KFConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public KFInsuranceDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KFInsuranceDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KFInsuranceDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KFInsuranceDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Zipcode> Zipcodes
		{
			get
			{
				return this.GetTable<Zipcode>();
			}
		}
		
		public System.Data.Linq.Table<Brand> Brands
		{
			get
			{
				return this.GetTable<Brand>();
			}
		}
		
		public System.Data.Linq.Table<Car> Cars
		{
			get
			{
				return this.GetTable<Car>();
			}
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Insurance> Insurances
		{
			get
			{
				return this.GetTable<Insurance>();
			}
		}
		
		public System.Data.Linq.Table<InsuranceOffer> InsuranceOffers
		{
			get
			{
				return this.GetTable<InsuranceOffer>();
			}
		}
		
		public System.Data.Linq.Table<Model> Models
		{
			get
			{
				return this.GetTable<Model>();
			}
		}
		
		public System.Data.Linq.Table<Offer> Offers
		{
			get
			{
				return this.GetTable<Offer>();
			}
		}
		
		public System.Data.Linq.Table<Type> Types
		{
			get
			{
				return this.GetTable<Type>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Zipcode")]
	public partial class Zipcode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ZipcodeNum;
		
		private int _Fk_CityId;
		
		private EntitySet<Customer> _Customers;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnZipcodeNumChanging(int value);
    partial void OnZipcodeNumChanged();
    partial void OnFk_CityIdChanging(int value);
    partial void OnFk_CityIdChanged();
    #endregion
		
		public Zipcode()
		{
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZipcodeNum", DbType="Int NOT NULL")]
		public int ZipcodeNum
		{
			get
			{
				return this._ZipcodeNum;
			}
			set
			{
				if ((this._ZipcodeNum != value))
				{
					this.OnZipcodeNumChanging(value);
					this.SendPropertyChanging();
					this._ZipcodeNum = value;
					this.SendPropertyChanged("ZipcodeNum");
					this.OnZipcodeNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fk_CityId", DbType="Int NOT NULL")]
		public int Fk_CityId
		{
			get
			{
				return this._Fk_CityId;
			}
			set
			{
				if ((this._Fk_CityId != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFk_CityIdChanging(value);
					this.SendPropertyChanging();
					this._Fk_CityId = value;
					this.SendPropertyChanged("Fk_CityId");
					this.OnFk_CityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Zipcode_Customer", Storage="_Customers", ThisKey="Id", OtherKey="Fk_ZipcodeId")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Zipcode", Storage="_City", ThisKey="Fk_CityId", OtherKey="Id", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Zipcodes.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Zipcodes.Add(this);
						this._Fk_CityId = value.Id;
					}
					else
					{
						this._Fk_CityId = default(int);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Zipcode = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Zipcode = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Brand")]
	public partial class Brand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Model> _Models;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Brand()
		{
			this._Models = new EntitySet<Model>(new Action<Model>(this.attach_Models), new Action<Model>(this.detach_Models));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Brand_Model", Storage="_Models", ThisKey="Id", OtherKey="Fk_BrandId")]
		public EntitySet<Model> Models
		{
			get
			{
				return this._Models;
			}
			set
			{
				this._Models.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Models(Model entity)
		{
			this.SendPropertyChanging();
			entity.Brand = this;
		}
		
		private void detach_Models(Model entity)
		{
			this.SendPropertyChanging();
			entity.Brand = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Car")]
	public partial class Car : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Fk_ModelId;
		
		private string _RegNum;
		
		private int _NewPrice;
		
		private int _Year;
		
		private bool _HasYellowPlates;
		
		private bool _ExtraEquipment;
		
		private EntitySet<Offer> _Offers;
		
		private EntityRef<Model> _Model;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFk_ModelIdChanging(int value);
    partial void OnFk_ModelIdChanged();
    partial void OnRegNumChanging(string value);
    partial void OnRegNumChanged();
    partial void OnNewPriceChanging(int value);
    partial void OnNewPriceChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnHasYellowPlatesChanging(bool value);
    partial void OnHasYellowPlatesChanged();
    partial void OnExtraEquipmentChanging(bool value);
    partial void OnExtraEquipmentChanged();
    #endregion
		
		public Car()
		{
			this._Offers = new EntitySet<Offer>(new Action<Offer>(this.attach_Offers), new Action<Offer>(this.detach_Offers));
			this._Model = default(EntityRef<Model>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fk_ModelId", DbType="Int NOT NULL")]
		public int Fk_ModelId
		{
			get
			{
				return this._Fk_ModelId;
			}
			set
			{
				if ((this._Fk_ModelId != value))
				{
					if (this._Model.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFk_ModelIdChanging(value);
					this.SendPropertyChanging();
					this._Fk_ModelId = value;
					this.SendPropertyChanged("Fk_ModelId");
					this.OnFk_ModelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegNum", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string RegNum
		{
			get
			{
				return this._RegNum;
			}
			set
			{
				if ((this._RegNum != value))
				{
					this.OnRegNumChanging(value);
					this.SendPropertyChanging();
					this._RegNum = value;
					this.SendPropertyChanged("RegNum");
					this.OnRegNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewPrice", DbType="Int NOT NULL")]
		public int NewPrice
		{
			get
			{
				return this._NewPrice;
			}
			set
			{
				if ((this._NewPrice != value))
				{
					this.OnNewPriceChanging(value);
					this.SendPropertyChanging();
					this._NewPrice = value;
					this.SendPropertyChanged("NewPrice");
					this.OnNewPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HasYellowPlates", DbType="Bit NOT NULL")]
		public bool HasYellowPlates
		{
			get
			{
				return this._HasYellowPlates;
			}
			set
			{
				if ((this._HasYellowPlates != value))
				{
					this.OnHasYellowPlatesChanging(value);
					this.SendPropertyChanging();
					this._HasYellowPlates = value;
					this.SendPropertyChanged("HasYellowPlates");
					this.OnHasYellowPlatesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExtraEquipment", DbType="Bit NOT NULL")]
		public bool ExtraEquipment
		{
			get
			{
				return this._ExtraEquipment;
			}
			set
			{
				if ((this._ExtraEquipment != value))
				{
					this.OnExtraEquipmentChanging(value);
					this.SendPropertyChanging();
					this._ExtraEquipment = value;
					this.SendPropertyChanged("ExtraEquipment");
					this.OnExtraEquipmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Car_Offer", Storage="_Offers", ThisKey="Id", OtherKey="Fk_CarId")]
		public EntitySet<Offer> Offers
		{
			get
			{
				return this._Offers;
			}
			set
			{
				this._Offers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_Car", Storage="_Model", ThisKey="Fk_ModelId", OtherKey="Id", IsForeignKey=true)]
		public Model Model
		{
			get
			{
				return this._Model.Entity;
			}
			set
			{
				Model previousValue = this._Model.Entity;
				if (((previousValue != value) 
							|| (this._Model.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Model.Entity = null;
						previousValue.Cars.Remove(this);
					}
					this._Model.Entity = value;
					if ((value != null))
					{
						value.Cars.Add(this);
						this._Fk_ModelId = value.Id;
					}
					else
					{
						this._Fk_ModelId = default(int);
					}
					this.SendPropertyChanged("Model");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.Car = this;
		}
		
		private void detach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.Car = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Zipcode> _Zipcodes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public City()
		{
			this._Zipcodes = new EntitySet<Zipcode>(new Action<Zipcode>(this.attach_Zipcodes), new Action<Zipcode>(this.detach_Zipcodes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(25) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Zipcode", Storage="_Zipcodes", ThisKey="Id", OtherKey="Fk_CityId")]
		public EntitySet<Zipcode> Zipcodes
		{
			get
			{
				return this._Zipcodes;
			}
			set
			{
				this._Zipcodes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Zipcodes(Zipcode entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Zipcodes(Zipcode entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private long _CprNr;
		
		private bool _IsPrivate;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Address;
		
		private string _PhoneNumber;
		
		private string _Mail;
		
		private int _Seniority;
		
		private int _YearsWithoutCrash;
		
		private int _Fk_ZipcodeId;
		
		private EntitySet<Offer> _Offers;
		
		private EntityRef<Zipcode> _Zipcode;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCprNrChanging(long value);
    partial void OnCprNrChanged();
    partial void OnIsPrivateChanging(bool value);
    partial void OnIsPrivateChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnMailChanging(string value);
    partial void OnMailChanged();
    partial void OnSeniorityChanging(int value);
    partial void OnSeniorityChanged();
    partial void OnYearsWithoutCrashChanging(int value);
    partial void OnYearsWithoutCrashChanged();
    partial void OnFk_ZipcodeIdChanging(int value);
    partial void OnFk_ZipcodeIdChanged();
    #endregion
		
		public Customer()
		{
			this._Offers = new EntitySet<Offer>(new Action<Offer>(this.attach_Offers), new Action<Offer>(this.detach_Offers));
			this._Zipcode = default(EntityRef<Zipcode>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CprNr", DbType="BigInt NOT NULL")]
		public long CprNr
		{
			get
			{
				return this._CprNr;
			}
			set
			{
				if ((this._CprNr != value))
				{
					this.OnCprNrChanging(value);
					this.SendPropertyChanging();
					this._CprNr = value;
					this.SendPropertyChanged("CprNr");
					this.OnCprNrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPrivate", DbType="Bit NOT NULL")]
		public bool IsPrivate
		{
			get
			{
				return this._IsPrivate;
			}
			set
			{
				if ((this._IsPrivate != value))
				{
					this.OnIsPrivateChanging(value);
					this.SendPropertyChanging();
					this._IsPrivate = value;
					this.SendPropertyChanged("IsPrivate");
					this.OnIsPrivateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NChar(25) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NChar(25) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mail", DbType="NChar(30) NOT NULL", CanBeNull=false)]
		public string Mail
		{
			get
			{
				return this._Mail;
			}
			set
			{
				if ((this._Mail != value))
				{
					this.OnMailChanging(value);
					this.SendPropertyChanging();
					this._Mail = value;
					this.SendPropertyChanged("Mail");
					this.OnMailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Seniority", DbType="Int NOT NULL")]
		public int Seniority
		{
			get
			{
				return this._Seniority;
			}
			set
			{
				if ((this._Seniority != value))
				{
					this.OnSeniorityChanging(value);
					this.SendPropertyChanging();
					this._Seniority = value;
					this.SendPropertyChanged("Seniority");
					this.OnSeniorityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearsWithoutCrash", DbType="Int NOT NULL")]
		public int YearsWithoutCrash
		{
			get
			{
				return this._YearsWithoutCrash;
			}
			set
			{
				if ((this._YearsWithoutCrash != value))
				{
					this.OnYearsWithoutCrashChanging(value);
					this.SendPropertyChanging();
					this._YearsWithoutCrash = value;
					this.SendPropertyChanged("YearsWithoutCrash");
					this.OnYearsWithoutCrashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fk_ZipcodeId", DbType="Int NOT NULL")]
		public int Fk_ZipcodeId
		{
			get
			{
				return this._Fk_ZipcodeId;
			}
			set
			{
				if ((this._Fk_ZipcodeId != value))
				{
					if (this._Zipcode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFk_ZipcodeIdChanging(value);
					this.SendPropertyChanging();
					this._Fk_ZipcodeId = value;
					this.SendPropertyChanged("Fk_ZipcodeId");
					this.OnFk_ZipcodeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Offer", Storage="_Offers", ThisKey="Id", OtherKey="Fk_CustomerId")]
		public EntitySet<Offer> Offers
		{
			get
			{
				return this._Offers;
			}
			set
			{
				this._Offers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Zipcode_Customer", Storage="_Zipcode", ThisKey="Fk_ZipcodeId", OtherKey="Id", IsForeignKey=true)]
		public Zipcode Zipcode
		{
			get
			{
				return this._Zipcode.Entity;
			}
			set
			{
				Zipcode previousValue = this._Zipcode.Entity;
				if (((previousValue != value) 
							|| (this._Zipcode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Zipcode.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._Zipcode.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._Fk_ZipcodeId = value.Id;
					}
					else
					{
						this._Fk_ZipcodeId = default(int);
					}
					this.SendPropertyChanged("Zipcode");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Offers(Offer entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Insurance")]
	public partial class Insurance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _Price;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    #endregion
		
		public Insurance()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(25) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InsuranceOffer")]
	public partial class InsuranceOffer
	{
		
		private int _Id;
		
		private int _Fk_OfferId;
		
		private int _Fk_InsuranceId;
		
		public InsuranceOffer()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fk_OfferId", DbType="Int NOT NULL")]
		public int Fk_OfferId
		{
			get
			{
				return this._Fk_OfferId;
			}
			set
			{
				if ((this._Fk_OfferId != value))
				{
					this._Fk_OfferId = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fk_InsuranceId", DbType="Int NOT NULL")]
		public int Fk_InsuranceId
		{
			get
			{
				return this._Fk_InsuranceId;
			}
			set
			{
				if ((this._Fk_InsuranceId != value))
				{
					this._Fk_InsuranceId = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Model")]
	public partial class Model : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Fk_BrandId;
		
		private int _Fk_TypeId;
		
		private string _Model1;
		
		private EntitySet<Car> _Cars;
		
		private EntityRef<Brand> _Brand;
		
		private EntityRef<Type> _Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFk_BrandIdChanging(int value);
    partial void OnFk_BrandIdChanged();
    partial void OnFk_TypeIdChanging(int value);
    partial void OnFk_TypeIdChanged();
    partial void OnModel1Changing(string value);
    partial void OnModel1Changed();
    #endregion
		
		public Model()
		{
			this._Cars = new EntitySet<Car>(new Action<Car>(this.attach_Cars), new Action<Car>(this.detach_Cars));
			this._Brand = default(EntityRef<Brand>);
			this._Type = default(EntityRef<Type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fk_BrandId", DbType="Int NOT NULL")]
		public int Fk_BrandId
		{
			get
			{
				return this._Fk_BrandId;
			}
			set
			{
				if ((this._Fk_BrandId != value))
				{
					if (this._Brand.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFk_BrandIdChanging(value);
					this.SendPropertyChanging();
					this._Fk_BrandId = value;
					this.SendPropertyChanged("Fk_BrandId");
					this.OnFk_BrandIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fk_TypeId", DbType="Int NOT NULL")]
		public int Fk_TypeId
		{
			get
			{
				return this._Fk_TypeId;
			}
			set
			{
				if ((this._Fk_TypeId != value))
				{
					if (this._Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFk_TypeIdChanging(value);
					this.SendPropertyChanging();
					this._Fk_TypeId = value;
					this.SendPropertyChanged("Fk_TypeId");
					this.OnFk_TypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Model", Storage="_Model1", DbType="NChar(25) NOT NULL", CanBeNull=false)]
		public string Model1
		{
			get
			{
				return this._Model1;
			}
			set
			{
				if ((this._Model1 != value))
				{
					this.OnModel1Changing(value);
					this.SendPropertyChanging();
					this._Model1 = value;
					this.SendPropertyChanged("Model1");
					this.OnModel1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Model_Car", Storage="_Cars", ThisKey="Id", OtherKey="Fk_ModelId")]
		public EntitySet<Car> Cars
		{
			get
			{
				return this._Cars;
			}
			set
			{
				this._Cars.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Brand_Model", Storage="_Brand", ThisKey="Fk_BrandId", OtherKey="Id", IsForeignKey=true)]
		public Brand Brand
		{
			get
			{
				return this._Brand.Entity;
			}
			set
			{
				Brand previousValue = this._Brand.Entity;
				if (((previousValue != value) 
							|| (this._Brand.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Brand.Entity = null;
						previousValue.Models.Remove(this);
					}
					this._Brand.Entity = value;
					if ((value != null))
					{
						value.Models.Add(this);
						this._Fk_BrandId = value.Id;
					}
					else
					{
						this._Fk_BrandId = default(int);
					}
					this.SendPropertyChanged("Brand");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_Model", Storage="_Type", ThisKey="Fk_TypeId", OtherKey="Id", IsForeignKey=true)]
		public Type Type
		{
			get
			{
				return this._Type.Entity;
			}
			set
			{
				Type previousValue = this._Type.Entity;
				if (((previousValue != value) 
							|| (this._Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Type.Entity = null;
						previousValue.Models.Remove(this);
					}
					this._Type.Entity = value;
					if ((value != null))
					{
						value.Models.Add(this);
						this._Fk_TypeId = value.Id;
					}
					else
					{
						this._Fk_TypeId = default(int);
					}
					this.SendPropertyChanged("Type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.Model = this;
		}
		
		private void detach_Cars(Car entity)
		{
			this.SendPropertyChanging();
			entity.Model = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Offer")]
	public partial class Offer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Fk_CarId;
		
		private int _Fk_CustomerId;
		
		private double _CarNewPriceDiscount;
		
		private double _SeniorityDiscount;
		
		private double _YearsWithoutCrashDiscount;
		
		private double _ExcessDiscount;
		
		private int _Excess;
		
		private System.DateTime _BeginningDate;
		
		private bool _CarChange;
		
		private EntityRef<Car> _Car;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFk_CarIdChanging(int value);
    partial void OnFk_CarIdChanged();
    partial void OnFk_CustomerIdChanging(int value);
    partial void OnFk_CustomerIdChanged();
    partial void OnCarNewPriceDiscountChanging(double value);
    partial void OnCarNewPriceDiscountChanged();
    partial void OnSeniorityDiscountChanging(double value);
    partial void OnSeniorityDiscountChanged();
    partial void OnYearsWithoutCrashDiscountChanging(double value);
    partial void OnYearsWithoutCrashDiscountChanged();
    partial void OnExcessDiscountChanging(double value);
    partial void OnExcessDiscountChanged();
    partial void OnExcessChanging(int value);
    partial void OnExcessChanged();
    partial void OnBeginningDateChanging(System.DateTime value);
    partial void OnBeginningDateChanged();
    partial void OnCarChangeChanging(bool value);
    partial void OnCarChangeChanged();
    #endregion
		
		public Offer()
		{
			this._Car = default(EntityRef<Car>);
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fk_CarId", DbType="Int NOT NULL")]
		public int Fk_CarId
		{
			get
			{
				return this._Fk_CarId;
			}
			set
			{
				if ((this._Fk_CarId != value))
				{
					if (this._Car.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFk_CarIdChanging(value);
					this.SendPropertyChanging();
					this._Fk_CarId = value;
					this.SendPropertyChanged("Fk_CarId");
					this.OnFk_CarIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fk_CustomerId", DbType="Int NOT NULL")]
		public int Fk_CustomerId
		{
			get
			{
				return this._Fk_CustomerId;
			}
			set
			{
				if ((this._Fk_CustomerId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFk_CustomerIdChanging(value);
					this.SendPropertyChanging();
					this._Fk_CustomerId = value;
					this.SendPropertyChanged("Fk_CustomerId");
					this.OnFk_CustomerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarNewPriceDiscount", DbType="Float NOT NULL")]
		public double CarNewPriceDiscount
		{
			get
			{
				return this._CarNewPriceDiscount;
			}
			set
			{
				if ((this._CarNewPriceDiscount != value))
				{
					this.OnCarNewPriceDiscountChanging(value);
					this.SendPropertyChanging();
					this._CarNewPriceDiscount = value;
					this.SendPropertyChanged("CarNewPriceDiscount");
					this.OnCarNewPriceDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeniorityDiscount", DbType="Float NOT NULL")]
		public double SeniorityDiscount
		{
			get
			{
				return this._SeniorityDiscount;
			}
			set
			{
				if ((this._SeniorityDiscount != value))
				{
					this.OnSeniorityDiscountChanging(value);
					this.SendPropertyChanging();
					this._SeniorityDiscount = value;
					this.SendPropertyChanged("SeniorityDiscount");
					this.OnSeniorityDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearsWithoutCrashDiscount", DbType="Float NOT NULL")]
		public double YearsWithoutCrashDiscount
		{
			get
			{
				return this._YearsWithoutCrashDiscount;
			}
			set
			{
				if ((this._YearsWithoutCrashDiscount != value))
				{
					this.OnYearsWithoutCrashDiscountChanging(value);
					this.SendPropertyChanging();
					this._YearsWithoutCrashDiscount = value;
					this.SendPropertyChanged("YearsWithoutCrashDiscount");
					this.OnYearsWithoutCrashDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExcessDiscount", DbType="Float NOT NULL")]
		public double ExcessDiscount
		{
			get
			{
				return this._ExcessDiscount;
			}
			set
			{
				if ((this._ExcessDiscount != value))
				{
					this.OnExcessDiscountChanging(value);
					this.SendPropertyChanging();
					this._ExcessDiscount = value;
					this.SendPropertyChanged("ExcessDiscount");
					this.OnExcessDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Excess", DbType="Int NOT NULL")]
		public int Excess
		{
			get
			{
				return this._Excess;
			}
			set
			{
				if ((this._Excess != value))
				{
					this.OnExcessChanging(value);
					this.SendPropertyChanging();
					this._Excess = value;
					this.SendPropertyChanged("Excess");
					this.OnExcessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginningDate", DbType="DateTime NOT NULL")]
		public System.DateTime BeginningDate
		{
			get
			{
				return this._BeginningDate;
			}
			set
			{
				if ((this._BeginningDate != value))
				{
					this.OnBeginningDateChanging(value);
					this.SendPropertyChanging();
					this._BeginningDate = value;
					this.SendPropertyChanged("BeginningDate");
					this.OnBeginningDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarChange", DbType="Bit NOT NULL")]
		public bool CarChange
		{
			get
			{
				return this._CarChange;
			}
			set
			{
				if ((this._CarChange != value))
				{
					this.OnCarChangeChanging(value);
					this.SendPropertyChanging();
					this._CarChange = value;
					this.SendPropertyChanged("CarChange");
					this.OnCarChangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Car_Offer", Storage="_Car", ThisKey="Fk_CarId", OtherKey="Id", IsForeignKey=true)]
		public Car Car
		{
			get
			{
				return this._Car.Entity;
			}
			set
			{
				Car previousValue = this._Car.Entity;
				if (((previousValue != value) 
							|| (this._Car.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Car.Entity = null;
						previousValue.Offers.Remove(this);
					}
					this._Car.Entity = value;
					if ((value != null))
					{
						value.Offers.Add(this);
						this._Fk_CarId = value.Id;
					}
					else
					{
						this._Fk_CarId = default(int);
					}
					this.SendPropertyChanged("Car");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Offer", Storage="_Customer", ThisKey="Fk_CustomerId", OtherKey="Id", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Offers.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Offers.Add(this);
						this._Fk_CustomerId = value.Id;
					}
					else
					{
						this._Fk_CustomerId = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Type")]
	public partial class Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Model> _Models;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Type()
		{
			this._Models = new EntitySet<Model>(new Action<Model>(this.attach_Models), new Action<Model>(this.detach_Models));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Type_Model", Storage="_Models", ThisKey="Id", OtherKey="Fk_TypeId")]
		public EntitySet<Model> Models
		{
			get
			{
				return this._Models;
			}
			set
			{
				this._Models.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Models(Model entity)
		{
			this.SendPropertyChanging();
			entity.Type = this;
		}
		
		private void detach_Models(Model entity)
		{
			this.SendPropertyChanging();
			entity.Type = null;
		}
	}
}
#pragma warning restore 1591
